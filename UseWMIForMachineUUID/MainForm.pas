unit MainForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls;

type
  TForm1 = class(TForm)
    Panel1: TPanel;
    lblUUID: TLabel;
    Panel2: TPanel;
    Label1: TLabel;
    procedure FormCreate(Sender: TObject);
  private
    function GetMachineUUID : String;
  public
    { Public-Deklarationen }
  end;

var
  Form1: TForm1;

implementation
Uses
  { The following unit is generated by Delphi. In the main menu use
    Component -> Import Component -> Type Library
    and browse to C:\Windows\SysWOW64\wbem\wbemdisp.TLB }

  WbemScripting_TLB, // WMI Interface

  System.Win.ComObj, // CoInitialize
  WinApi.ActiveX; // COINIT_APARTMENTTHREADED

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
begin
  lblUUID.Caption := GetMachineUUID;
end;

  // https://learn.microsoft.com/en-us/windows/win32/api/wbemcli/nf-wbemcli-iwbemlocator-connectserver#examples
function TForm1.GetMachineUUID : String;
var ComHandle: THandle;
VAR LocHandle: THandle;
var Locator: ISWbemLocator;
var Services: ISWbemServices;
var Namespace: String;
var tempI: IDispatch;
var SWbemObjectSet: ISWbemObjectSet;
var SObject: Variant;
begin
  Result := '';

  ComHandle := CoInitializeEx(nil, COINIT_APARTMENTTHREADED);
  if FAILED(ComHandle) then
  begin
    Result := SysErrorMessage(GetLastError);
    Exit;
  end;

  try
    Locator := nil;
    LocHandle := CoCreateInstance(CLASS_SWbemLocator, nil, CLSCTX_INPROC_SERVER, IID_ISWbemLocator, Locator);
    if FAILED(LocHandle) then
    begin
      Result := SysErrorMessage(GetLastError);
      Exit;
    end;

    Namespace := 'root/CIMV2';
    Services := nil;
    tempI := nil;
    Services := Locator.ConnectServer('', Namespace, '', '', '', '', 0, tempi);
    if(Services = nil) then
    begin
      Result := SysErrorMessage(GetLastError);
      Exit;
    end;

    SWbemObjectSet := Services.ExecQuery('SELECT * FROM Win32_ComputerSystemProduct', 'WQL', 0, nil);

{   iterating an array is as simple as that:

    SetLength(FetchData, SWbemObjectSet.Count);
    for var i := 0 to SWbemObjectSet.Count - 1 do
    begin
      SObject := SWbemObjectSet.ItemIndex(i);
      FetchData[i] := SObject.FieldName;
    end;
}

    SObject := SWbemObjectSet.ItemIndex(0);
    Result := SObject.UUID;

  finally
    CoUninitialize();
  end;
end;


end.
